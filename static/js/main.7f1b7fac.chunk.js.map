{"version":3,"sources":["components/Scene/Scene.elements.js","components/Scene/Script.js","components/Scene/Scene.js","App.js","index.js"],"names":["ContainerScene","styled","div","currentRef","scene","THREE","camera","light","position","set","add","lookAt","renderer","setSize","orbitControls","OrbitControls","domElement","enableDamping","resize","clientWidth","clientHeight","aspect","updateProjectionMatrix","window","addEventListener","animate","update","render","requestAnimationFrame","cube","color","transparent","opacity","wireframe","geometry","material","MeshStandardMaterial","sphere","x","torusknot","torusknotmaterial","flatShading","torusKnot","load","texture","background","Scene","mountRef","useRef","useEffect","current","appendChild","initScene","dispose","removeChild","className","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"kMAEaA,E,MAAiBC,EAAOC,IAAV,8D,eCEvBC,EAAa,KAGXC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAwB,GAAI,EAAW,GAAK,KAEzDE,EAAQ,IAAIF,IAAiB,SAAU,EAAG,KAEhDE,EAAMC,SAASC,IAAI,GAAI,GAAI,IAE3BL,EAAMM,IAAIH,GACVH,EAAMM,IAAIJ,GAEVA,EAAOE,SAASC,IAAI,EAAG,EAAG,GAC1BH,EAAOK,OAAO,IAAIN,KAElB,IAAMO,EAAW,IAAIP,IACrBO,EAASC,QAAQ,IAAK,KAGtB,IAAMC,EAAgB,IAAIC,IAAcT,EAAQM,EAASI,YACzDF,EAAcG,eAAgB,EAI9B,IAAMC,EAAS,WACbN,EAASC,QAAQV,EAAWgB,YAAahB,EAAWiB,cACpDd,EAAOe,OAASlB,EAAWgB,YAAchB,EAAWiB,aACpDd,EAAOgB,0BAETC,OAAOC,iBAAiB,SAAUN,IAGlB,SAAVO,IACJX,EAAcY,SACdd,EAASe,OAAOvB,EAAOE,GACvBsB,sBAAsBH,GAExBA,GAGA,IAAMI,EAAO,IAAIxB,IACf,IAAIA,IAAwB,EAAG,EAAG,GAClC,IAAIA,IAAwB,CAC1ByB,MAAO,MACPC,aAAa,EACbC,QAAS,GACTC,WAAW,KAGf7B,EAAMM,IAAImB,GAEV,IAAMK,EAAW,IAAI7B,IAAsB,GAAI,GAAI,IAC7C8B,EAAW,IAAIC,IAAqB,IAGpCC,EAAS,IAAIhC,IAAW6B,EAAUC,GAExCE,EAAO7B,SAAS8B,EAAI,EACpBlC,EAAMM,IAAI2B,GACV,IAAME,EAAY,IAAIlC,IAAyB,GAAI,GAAI,IAAK,IACtDmC,EAAoB,IAAInC,IAAyB,CAErDoC,aAAa,IAETC,EAAY,IAAIrC,IAAYkC,EAAWC,GAC7CE,EAAUlC,SAAS8B,GAAG,EACtBlC,EAAMM,IAAKgC,IACE,IAAIrC,KACVsC,KAAK,mBAAmB,SAASC,GACtCxC,EAAMyC,WAAaD,KAGd,I,OCzDQE,EAhBD,WACZ,IAAMC,EAAWC,iBAAO,MAUxB,OARAC,qBAAU,WAGR,ODmEqB,SAACF,GACxB5C,EAAa4C,EAASG,QACtBhC,IACAf,EAAWgD,YAAYvC,EAASI,YCxE9BoC,CAAUL,GAEH,WD2ET3C,EAAMiD,UACNlD,EAAWmD,YAAY1C,EAASI,eCzE7B,IAGD,cAAChB,EAAD,CAAgBuD,UAAU,iBAAiBC,IAAKT,KCNrCU,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCANC,IAAS/B,OACP,cAAC,IAAMgC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7f1b7fac.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const ContainerScene = styled.div`\n  width: 100%;\n  height: 100vh;\n`;\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TextureLoader, MeshMatcapMaterial, MeshStandardMaterial, Color } from 'three';\n//Global variables\nlet currentRef = null;\n\n//Scene, camera, renderer\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(25, 100 / 100, 0.1, 100);\n//lights  \nconst light = new THREE.PointLight(0xff0000, 5, 100);\n\nlight.position.set(50, 50, 50);\n\nscene.add(light);\nscene.add(camera);\n\ncamera.position.set(5, 5, 5);\ncamera.lookAt(new THREE.Vector3());\n\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(100, 100);\n\n//OrbitControls\nconst orbitControls = new OrbitControls(camera, renderer.domElement);\norbitControls.enableDamping = true;\n//target\n/* orbitControls.target=new THREE.Vector3(3,3,3)\n *///Resize canvas\nconst resize = () => {\n  renderer.setSize(currentRef.clientWidth, currentRef.clientHeight);\n  camera.aspect = currentRef.clientWidth / currentRef.clientHeight;\n  camera.updateProjectionMatrix();\n};\nwindow.addEventListener(\"resize\", resize);\n\n//Animate the scene\nconst animate = () => {\n  orbitControls.update();\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n};\nanimate();\n\n//cube\nconst cube = new THREE.Mesh(\n  new THREE.BoxBufferGeometry(1, 1, 1),\n  new THREE.MeshBasicMaterial({ \n    color: 0x00ff00,\n    transparent: true,\n    opacity: 0.3,\n    wireframe: true,\n     })\n);\nscene.add(cube);\n\nconst geometry = new THREE.SphereGeometry( .7, 32, 16 );\nconst material = new MeshStandardMaterial({\n  \n});\nconst sphere = new THREE.Mesh(geometry, material);\n\nsphere.position.x = 2;\nscene.add(sphere);\nconst torusknot = new THREE.TorusKnotGeometry( .3, .1, 100, 16 );\nconst torusknotmaterial = new THREE.MeshNormalMaterial({\n  //fake light\n  flatShading: true}\n );\nconst torusKnot = new THREE.Mesh( torusknot, torusknotmaterial );\ntorusKnot.position.x=-2\nscene.add( torusKnot );\nvar loader = new THREE.TextureLoader()\nloader.load(\"./texture/1.jpg\", function(texture){\n  scene.background = texture\n});\n//Init and mount the scene\nexport const initScene = (mountRef) => {\n  currentRef = mountRef.current;\n  resize();\n  currentRef.appendChild(renderer.domElement);\n};\n\n//Dismount and clena up the buffer from the scene\nexport const cleanUpScene = () => {\n  scene.dispose();\n  currentRef.removeChild(renderer.domElement);\n};\n","import { useEffect, useRef } from \"react\";\nimport { ContainerScene } from \"./Scene.elements\";\nimport { cleanUpScene, initScene } from \"./Script\";\n\nconst Scene = () => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    initScene(mountRef);\n\n    return () => {\n      cleanUpScene();\n    };\n  }, []);\n\n  return (\n    <ContainerScene className='SceneContainer' ref={mountRef}></ContainerScene>\n  );\n};\n\nexport default Scene;\n","import { Scene } from \"./components\";\n\nfunction App() {\n  return (\n    <>\n      <Scene />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}